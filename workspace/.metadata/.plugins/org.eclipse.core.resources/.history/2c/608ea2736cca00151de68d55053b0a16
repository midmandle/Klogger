import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;


public class CalendarTable {
	
	private DefaultTableModel calendarModel;
	JTable jtbl;
	int month, year;
	public CalendarTable(int month, int year, AppointmentBook thisBook)
	{
		this.month = month;
		this.year = year;
		int daysInMonth = determineDaysInMonth();
		
		//ArrayList<Appointment> thisMonthsAppointments = findAppointmentsForMonth(thisBook);
		drawTable(daysInMonth);//, thisMonthsAppointments);
	}
	
	private int determineDaysInMonth()
	{
		GregorianCalendar tmpCal = new GregorianCalendar(year, month, 1);
		int noOfDays = tmpCal.getActualMaximum(Calendar.DAY_OF_MONTH);
		return noOfDays;
	}
	
	private String determineStartDay()
	{
		String startDay = "";
		
		Calendar tmpCal = new GregorianCalendar(year, month, 1);
		int dayOfWeek = tmpCal.getActualMinimum(Calendar.DAY_OF_WEEK);
		
		switch(dayOfWeek)
		{
			case 0:
			{
				startDay = "Monday";
				break;
			}
			case 1:
			{
				startDay = "Tuesday";
				break;
			}
			case 2:
			{
				startDay = "Wednesday";
				break;
			}
			case 3:
			{
				startDay = "Thursday";
				break;
			}
			case 4:
			{
				startDay = "Friday";
				break;
			}
			case 5:
			{
				startDay = "Saturday";
				break;
			}
			case 6:
			{
				startDay = "Sunday";
				break;
			}
		}
		
		System.out.println(startDay);
		return startDay;
	}
	
	private ArrayList<Appointment> findAppointmentsForMonth(AppointmentBook thisBook)
	{
		ArrayList<Appointment> thisMonthsAppointments = new ArrayList<Appointment>();
		Calendar tmpCal = new GregorianCalendar(year, month, 1);
		Calendar startOfMonth = tmpCal;
		Calendar endOfMonth = new GregorianCalendar(year, month, tmpCal.getActualMaximum(Calendar.DAY_OF_MONTH));
		
		for(int i = 0; i < thisBook.appointmentList.size(); i++)
		{
			boolean afterOrEqualToStartOfMonth = (thisBook.appointmentList.get(i).getStartDateTime().after(startOfMonth)) || (thisBook.appointmentList.get(i).getStartDateTime().equals(startOfMonth));
			boolean beforeOrEqualToEndOfMonth = (thisBook.appointmentList.get(i).getStartDateTime().before(endOfMonth)) || (thisBook.appointmentList.get(i).getStartDateTime().equals(endOfMonth));
			if((afterOrEqualToStartOfMonth) && (beforeOrEqualToEndOfMonth))
				thisMonthsAppointments.add(thisBook.appointmentList.get(i));
		}
		
		return thisMonthsAppointments;
	}
	
	private void drawTable(int daysInMonth)//, ArrayList<Appointment> thisMonthsAppointments)
	{
		String[] columnNames = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
		
		calendarModel = new DefaultTableModel(columnNames, 6);
		jtbl = new JTable(calendarModel);
		
		calendarModel.setRowCount(7);
		
		int startpoint = 0;
		if(!(determineStartDay().equalsIgnoreCase("Monday")))
		{
			String day = determineStartDay();
			switch(day)
			{
				case "Monday":
				{
					startpoint = 0;
					break;
				}
				case "Tuesday":
				{
					startpoint = 1;
					break;
				}
				case "Wednesday":
				{
					startpoint = 2;
					break;
				}
				case "Thursday":
				{
					startpoint = 3;
					break;
				}
				case "Friday":
				{
					startpoint = 4;
					break;
				}
				case "Saturday":
				{
					startpoint = 5;
					break;
				}
				case "Sunday":
				{
					startpoint = 6;
					break;
				}
			}
		}	
		
		System.out.println("Startpoint: "+startpoint);
		
		int k = 0;
		
		for(int i = startpoint; i < 7; i++)
		{
			k++;
			jtbl.setValueAt(k, 0, i);
		}
		
		for(int i = 0; i < 7; i++)
		{
			for(int j = 1; j < 6; j++)
			{
				
				if(k > daysInMonth)
					return;
				k++;
				jtbl.setValueAt(k,  i, j);
			}
		}
		
	}
}
