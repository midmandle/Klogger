import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;

public class AppointmentBook {
	int NOTFOUND = 0;
	int FOUND = 1;
	
	String appointmentBookName;
	
	ArrayList<Appointment> appointmentList = new ArrayList<Appointment>();
	DatabaseCommunicator dbComms = null;
	
	public AppointmentBook(String appointmentBookName)
	{
		this.appointmentBookName = appointmentBookName;
		dbComms = new DatabaseCommunicator();
		setupNewAppointmentBookDB();
	}
	
	public void add(Appointment newAppointment)
	{
		if(isInBook(newAppointment))
			return; //TODO: Throw exception: "ITEM ALREADY EXISTS"
		else
		{
			appointmentList.add(newAppointment);
			saveAppointmentsListToDatabase();
		}
	}
	
	public ArrayList<Appointment> getAllAppointments()
	{
		return appointmentList;
	}
	
	public void showAllAppointments()
	{
		System.out.println(appointmentList.size()+" appointments:");
		for(int i = 0; i < appointmentList.size(); i++)
		{		
			int startDay = 0;
			int startMonth = 0;
			int startYear = 0;
			
			int endDay = 0;
			int endMonth = 0;
			int endYear = 0;
			
			String title = null;
			
			startDay = appointmentList.get(i).getStartDateTime().get(Calendar.DAY_OF_MONTH);
			startMonth = appointmentList.get(i).getStartDateTime().get(Calendar.MONTH);
			startYear = appointmentList.get(i).getStartDateTime().get(Calendar.YEAR);
			
			endDay = appointmentList.get(i).getEndDateTime().get(Calendar.DAY_OF_MONTH);
			endMonth = appointmentList.get(i).getEndDateTime().get(Calendar.MONTH);
			endYear = appointmentList.get(i).getEndDateTime().get(Calendar.YEAR);
			
			title = appointmentList.get(i).eventTitle;
			
			String output = String.format("%s Starts: %d/%d/%d Ends: %d/%d/%d", title, startDay, startMonth, startYear, endDay, endMonth, endYear);
			
			System.out.println(output);
			
		}
			
	}
	
	public int find(Appointment appointmentToFind)
	{
		for(int i = 0; i < appointmentList.size(); i++)
			if(appointmentList.get(i).eventTitle == appointmentToFind.eventTitle)
				return FOUND;
		return NOTFOUND;
	}
	
	public void remove(Appointment appointmentToRemove)
	{
		if(isInBook(appointmentToRemove))
			appointmentList.remove(appointmentToRemove);
		else
			return;//TODO: Throw exception: "ITEM DOESNT EXIST"
	}
	
	public boolean isInBook(Appointment appointmentToCheck)
	{
		if(find(appointmentToCheck) > 0)
			return true;
		return false;
	}
	
	private void addAppointmentToDatabase(Appointment appointment)
	{
		int startDay = appointment.getStartDateTime().get(Calendar.DAY_OF_MONTH);
		int startMonth = appointment.getStartDateTime().get(Calendar.MONTH);
		int startYear = appointment.getStartDateTime().get(Calendar.YEAR);
		int endDay = appointment.getEndDateTime().get(Calendar.DAY_OF_MONTH);
		int endMonth = appointment.getEndDateTime().get(Calendar.MONTH);
		int endYear = appointment.getEndDateTime().get(Calendar.YEAR);
		
		String description = appointment.eventTitle;
		String location = "null";
		String query = String.format("INSERT INTO Book1 (dateTimeFrom, dateTimeTo, description, location) VALUES (\"%d/%d/%d\", \"%d/%d/%d\", \"%s\", \"%s\");", startDay, startMonth, startYear, endDay, endMonth, endYear, description, location);
		
		try {
			dbComms.MakeRequest(query);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	//TODO: AppointmentBook: saveAppointmentsToDatabase.
	private void saveAppointmentsListToDatabase()
	{
		for(int i = 0; i < appointmentList.size(); i++)
		{
			addAppointmentToDatabase(appointmentList.get(i));
		}
	}
	
	//TODO: AppointmentBook: loadAppointmentsFromDatabse.
	public void loadAppointmentsFromDatabase()
	{
		ResultSet results = null;
		try {
			results = dbComms.MakeRequest("SELECT * FROM "+appointmentBookName+";");
			while(results.next())
			{
				Appointment a = new Appointment();
				System.out.println(results.getDate(0));
				System.out.println(results.getDate(1);
				System.out.println(results.getString(2));
				System.out.println(results.getString(3));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void setupNewAppointmentBookDB()
	{
		try {
			dbComms.MakeRequest("CREATE TABLE IF NOT EXISTS "+ appointmentBookName +" (dateTimeFrom DATETIME PRIMARY KEY, dateTimeTo DATETIME UNIQUE, description VARCHAR, location VARCHAR);");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
